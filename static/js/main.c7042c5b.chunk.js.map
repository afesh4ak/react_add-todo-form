{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","normalizedTodos","App","useState","setTodos","setTitle","selectedUser","setSelectedUser","titleError","setTitleError","userError","setUserError","action","method","onSubmit","e","preventDefault","htmlFor","type","value","onChange","target","placeholder","disabled","onClick","trim","parseInt","newTodo","length","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7042c5b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface UserInfoProps {\n  user: User;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { User, UserInfo } from '../UserInfo';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  userId: number;\n  completed: boolean;\n}\n\ninterface TodoInfoProps {\n  todo: Todo & {\n    user?: User;\n  };\n  users?: User[];\n}\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id}\n      className={`TodoInfo ${todo.completed ? 'TodoInfo--completed' : ''}`}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo?.user && <UserInfo user={todo?.user} />}\n    </article>\n  );\n};\n","import { Todo, TodoInfo } from '../TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number) => {\n  return usersFromServer?.find((user) => user.id === userId);\n};\n\nconst normalizedTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(normalizedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [titleError, setTitleError] = useState('');\n  const [userError, setUserError] = useState('');\n\n  const handleAddTodo = () => {\n    setTitleError('');\n    setUserError('');\n\n    if (!title.trim()) {\n      setTitleError('Please enter a title');\n    }\n\n    if (!selectedUser) {\n      setUserError('Please choose a user');\n    }\n\n    const user = getUserById(parseInt(selectedUser, 10));\n\n    if (!user) {\n      return;\n    }\n\n    if (title.trim() && selectedUser) {\n      const newTodo = {\n        user,\n        id: todos.length > 0 ? Math.max(...todos.map(todo => todo.id)) + 1 : 1,\n        title,\n        userId: parseInt(selectedUser, 10),\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n\n      setTitle('');\n      setSelectedUser('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={(e) => e.preventDefault()}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n              setTitleError('');\n            }}\n            placeholder=\"Enter a title\"\n          />\n          <span className=\"error\">{titleError}</span>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={(e) => {\n              setSelectedUser(e.target.value);\n              setUserError('');\n            }}\n            placeholder=\"Choose a user\"\n          >\n            <option value=\"\" disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          <span className=\"error\">{userError}</span>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleAddTodo}\n        >\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={todos} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}